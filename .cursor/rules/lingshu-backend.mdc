---
description: "LingShu Backend - Domain-Driven Design (DDD) + Test-Driven Development (TDD) Rules"
globs: ["LingShu-backend/**/*"]
alwaysApply: true
---

# LingShu Backend - Development Rules

## Architecture: Domain-Driven Design (DDD) + Test-Driven Development (TDD)

This project strictly follows DDD and TDD principles. All code generation and modification must adhere to the architectural layers and the TDD workflow.

### Architectural Layers

1. **`app/api` (API Layer):**
   * **Responsibility:** Handles HTTP requests, serialization, and deserialization. This is the entry point to the application.
   * **Contains:** FastAPI routers, request/response Pydantic models.
   * **Rules:** Should not contain any business logic. It calls Application Services to perform tasks.

2. **`app/application` (Application Layer):**
   * **Responsibility:** Orchestrates domain objects to fulfill application use cases. It acts as a mediator between the API and the Domain.
   * **Contains:** Application Services.
   * **Rules:** Does not contain business logic itself, but coordinates the domain objects that do.

3. **`app/domain` (Domain Layer):**
   * **Responsibility:** The heart of the business logic. Contains all business rules and concepts.
   * **Contains:** Domain Models (Aggregates, Entities, Value Objects), Domain Events, and Repository Interfaces.
   * **Rules:** This layer is completely independent of any framework or infrastructure. It should be pure Python.

4. **`app/infrastructure` (Infrastructure Layer):**
   * **Responsibility:** Implements external concerns, such as database access, file systems, or third-party API clients.
   * **Contains:** Implementations of Repository Interfaces, database models/schemas, and external service clients.
   * **Rules:** This is where dependencies on frameworks like SQLModel or external libraries are allowed.

### Test-Driven Development (TDD) Workflow

1. **Write a Failing Test First:** Before writing any new implementation code, first write a test case that defines the desired functionality or reproduces the bug. This test should fail initially.

2. **Write Code to Pass the Test:** Write the minimum amount of implementation code necessary to make the failing test pass.

3. **Refactor:** Once the test is passing, refactor the implementation code for clarity, performance, and maintainability, ensuring the test continues to pass.

### Specific Guidelines:

* **New Features:** For any new logic, a corresponding test file must be created in the `tests/` directory, mirroring the path of the source file (e.g., tests for `app/application/services.py` should be in `tests/application/test_services.py`).
* **Bug Fixes:** When fixing a bug, you must first add a test case that specifically fails due to the bug. The fix is complete only when this test (and all other tests) passes.
* **Run All Tests:** Before committing any changes, run the entire test suite to ensure that your changes have not introduced any regressions.
